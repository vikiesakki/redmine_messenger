- @settings = ActionController::Parameters.new(@settings) unless Rails.version >= '5.2'

.info = t(:messenger_settings_intro)
br
p
  = content_tag(:label, l(:label_settings_messenger_url))
  = text_field_tag('settings[messenger_url]', @settings[:messenger_url], size: 60, placeholder: 'https://webhook.url')
  em.info = t(:messenger_url_info_html)
p
  = content_tag(:label, l(:label_settings_messenger_icon))
  = text_field_tag('settings[messenger_icon]', @settings[:messenger_icon], size: 60)
p
  = content_tag(:label, l(:label_settings_messenger_channel))
  = text_field_tag('settings[messenger_channel]', @settings[:messenger_channel], size: 30, placeholder: 'redmine')
  em.info = t(:messenger_channel_info_html)
p
  = content_tag(:label, l(:label_settings_messenger_username))
  = text_field_tag('settings[messenger_username]', @settings[:messenger_username], size: 30)
p
  = content_tag(:label, l(:label_settings_messenger_verify_ssl))
  = check_box_tag 'settings[messenger_verify_ssl]', 1, @settings[:messenger_verify_ssl].to_i == 1
  em.info = t(:messenger_verify_ssl_info_html)

br
h3 = l(:label_zoho_setting)
.info = t(:messenger_support_zoho)
br
p
  = content_tag(:label, l(:label_settings_zoho_authtoken))
  = text_field_tag('settings[zoho_authtoken]', @settings[:zoho_authtoken], size:30)
p
  = content_tag(:label, l(:label_settings_zoho_channel))
  = text_field_tag('settings[zoho_channel]', @settings[:zoho_channel], size:30)
p
 = content_tag(:label, l(:label_settings_zoho_client_id))
 = text_field_tag('settings[zoho_client_id]', @settings[:zoho_client_id], size:30)
p
 = content_tag(:label, l(:label_settings_zoho_client_secret))
 = text_field_tag('settings[zoho_client_secret]', @settings[:zoho_client_secret], size:30)
p
 = content_tag(:label, l(:label_settings_zoho_refresh_token))
 = text_field_tag('settings[zoho_refresh_token]', @settings[:zoho_refresh_token], size:30)

br
h3 = l(:label_teams_setting)
br

ruby:
  if params['code'].present?
    uri = URI("https://login.microsoftonline.com/#{@settings[:microsoft_tennant_id]}/oauth2/v2.0/token")
    token_params = {'client_id' => @settings[:microsoft_client_id],
    'client_secret' => @settings[:microsoft_secret],
    'redirect_uri' => @settings[:microsoft_redirect_uri],
    'scope' => 'https://graph.microsoft.com/.default offline_access',
    'grant_type' => 'authorization_code',
    'code' => params['code']}
    encoded_form = URI.encode_www_form(token_params)
    headers = { content_type: "application/x-www-form-urlencoded" }
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    response = http.request_post(uri.path, encoded_form, headers)
    token_response = JSON.parse(response.body)
    if token_response['refresh_token'].present?
      @settings[:microsoft_refresh_token] = token_response['refresh_token']
      access_uri = URI("https://login.microsoftonline.com/#{@settings[:microsoft_tennant_id]}/oauth2/v2.0/token")
      access_params = {'client_id' => @settings[:microsoft_client_id],
      'client_secret' => @settings[:microsoft_secret],
      'redirect_uri' => @settings[:microsoft_redirect_uri],
      'scope' => 'https://graph.microsoft.com/.default offline_access',
      'grant_type' => 'refresh_token',
      'refresh_token' => token_response['refresh_token']}
      access_encoded_form = URI.encode_www_form(access_params)
      access_headers = { content_type: "application/x-www-form-urlencoded" }
      access_http = Net::HTTP.new(access_uri.host, access_uri.port)
      access_http.use_ssl = true
      access_token_response = http.request_post(access_uri.path, access_encoded_form, access_headers)
      access_token_data = JSON.parse(access_token_response.body)
      if access_token_data['access_token'].present?
        setting = Setting.where(name: 'plugin_redmine_messenger').first
        setting_value = setting.value
        @settings[:microsoft_refresh_token] = setting_value['microsoft_refresh_token'] = access_token_data['refresh_token']
        @settings[:microsoft_access_token] = setting_value['microsoft_access_token'] = access_token_data['access_token']
        setting.value = setting_value
        setting.save
      end
    end
  end

a href="https://login.microsoftonline.com/#{@settings[:microsoft_tennant_id]}/oauth2/v2.0/authorize?client_id=#{@settings[:microsoft_client_id]}&response_type=code&redirect_uri=#{@settings[:microsoft_redirect_uri]}&response_mode=query&scope=https://graph.microsoft.com/.default offline_access&state=12345" class='btn btn-primary' Fetch Refresh Token.
p
  = content_tag(:label, l(:label_settings_microsoft_client_id))
  = text_field_tag('settings[microsoft_client_id]', @settings[:microsoft_client_id], size:30)
p
  = content_tag(:label, l(:label_settings_microsoft_tenant_id))
  = text_field_tag('settings[microsoft_tennant_id]', @settings[:microsoft_tennant_id], size:30)
p
 = content_tag(:label, l(:label_settings_microsoft_client_secret))
 = text_field_tag('settings[microsoft_secret]', @settings[:microsoft_secret], size:30)
p
 = content_tag(:label, l(:label_settings_microsoft_redirect_uri))
 = text_field_tag('settings[microsoft_redirect_uri]', @settings[:microsoft_redirect_uri], size:30)
p
 = content_tag(:label, l(:label_settings_microsoft_refresh_token))
 = text_field_tag('settings[microsoft_refresh_token]', @settings[:microsoft_refresh_token], size:30, readonly: true)
p
 = content_tag(:label, l(:label_settings_microsoft_access_token))
 = text_field_tag('settings[microsoft_access_token]', @settings[:microsoft_access_token], size:30, readonly: true)
p
 = content_tag(:label, l(:label_settings_whitelist_ip))
 = text_field_tag('settings[whitelist_ips]', @settings[:whitelist_ips], size:30)

h3 = l(:label_issue_plural)
.info = t(:messenger_issue_intro)
br
p
  = content_tag(:label, l(:label_settings_auto_mentions))
  = check_box_tag 'settings[auto_mentions]', 1, @settings[:auto_mentions].to_i == 1
p
  = content_tag(:label, l(:label_settings_default_mentions))
  = text_field_tag('settings[default_mentions]', @settings[:default_mentions], size: 30)
  em.info = t(:default_mentionsl_info)
p
  = content_tag(:label, l(:label_settings_display_watchers))
  = check_box_tag 'settings[display_watchers]', 1, @settings[:display_watchers].to_i == 1
p
  = content_tag(:label, l(:label_settings_post_updates))
  = check_box_tag 'settings[post_updates]', 1, @settings[:post_updates].to_i == 1
p
  = content_tag(:label, l(:label_settings_new_include_description))
  = check_box_tag 'settings[new_include_description]', 1, @settings[:new_include_description].to_i == 1
p
  = content_tag(:label, l(:label_settings_updated_include_description))
  = check_box_tag 'settings[updated_include_description]', 1, @settings[:updated_include_description].to_i == 1
p
  = content_tag(:label, l(:label_settings_post_private_issues))
  = check_box_tag 'settings[post_private_issues]', 1, @settings[:post_private_issues].to_i == 1
p
  = content_tag(:label, l(:label_settings_post_private_notes))
  = check_box_tag 'settings[post_private_notes]', 1, @settings[:post_private_notes].to_i == 1

br
h3 = l(:label_wiki)
.info = t(:messenger_wiki_intro)
br
p
  = content_tag(:label, l(:label_settings_post_wiki))
  = check_box_tag 'settings[post_wiki]', 1, @settings[:post_wiki].to_i == 1
p
  = content_tag(:label, l(:label_settings_post_wiki_updates))
  = check_box_tag 'settings[post_wiki_updates]', 1, @settings[:post_wiki_updates].to_i == 1

- if RedmineMessenger::REDMINE_DB_SUPPORT
  br
  h3 = l(:label_db_entry_plural)
  .info = t(:messenger_db_intro)
  br
  p
    = content_tag(:label, l(:label_settings_post_db))
    = check_box_tag 'settings[post_db]', 1, @settings[:post_db].to_i == 1
  p
    = content_tag(:label, l(:label_settings_post_db_updates))
    = check_box_tag 'settings[post_db_updates]', 1, @settings[:post_db_updates].to_i == 1
  p
    = content_tag(:label, l(:label_settings_post_private_db))
    = check_box_tag 'settings[post_private_db]', 1, @settings[:post_private_db].to_i == 1

- if RedmineMessenger::REDMINE_CONTACTS_SUPPORT
  br
  h3 = l(:label_contact_plural)
  .info = t(:messenger_contacts_intro)
  br
  p
    = content_tag(:label, l(:label_settings_post_contact))
    = check_box_tag 'settings[post_contact]', 1, @settings[:post_contact].to_i == 1
  p
    = content_tag(:label, l(:label_settings_post_contact_updates))
    = check_box_tag 'settings[post_contact_updates]', 1, @settings[:post_contact_updates].to_i == 1
  p
    = content_tag(:label, l(:label_settings_post_private_contacts))
    = check_box_tag 'settings[post_private_contacts]', 1, @settings[:post_private_contacts].to_i == 1

- if Redmine::Plugin.installed?('redmine_passwords')
  br
  h3 = l(:label_password_plural)
  .info = t(:messenger_passwords_intro)
  br
  p
    = content_tag(:label, l(:label_settings_post_password))
    = check_box_tag 'settings[post_password]', 1, @settings[:post_password].to_i == 1
  p
    = content_tag(:label, l(:label_settings_post_password_updates))
    = check_box_tag 'settings[post_password_updates]', 1, @settings[:post_password_updates].to_i == 1
